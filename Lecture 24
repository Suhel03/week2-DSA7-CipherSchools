public class CompleteBinaryTree {


public static int countNodes (TreeNode root) {
if (root == null) {
return 0;
}

int leftNodes = countNodes (root. left);
int rightNodes = countNodes (root.right);
return 1+ leftNodes + rightNodes;
}
public static boolean isCompleteBinaryTreeHelper (TreeNode root, int index, int numberOfNodes) {
if(root == null) {
return true
}
if(index >= numberOfNodes) {
return false;

}
boolean isLeft CompleteBinaryTree = isCompleteBinaryTreeHelper (root.left, index: 2* index + 1, numberOfNodes);
boolean isRight CompleteBinaryTree = isCompleteBinaryTreeHelper (root.right, index: 2* index + 2, numberOfNodes);
return isLeft CompleteBinaryTree && isRight CompleteBinaryTree;

}
public static boolean isCompleteBinaryTree (TreeNode root) {
return isCompleteBinaryTreeHelper (root, index: 0, countNodes (root));|
}
public static void main(String[] args) {
TreeNode root = new TreeNode ( data: 18);
root.left= new TreeNode( data: 15);
root.left.left = new TreeNode ( data: 40);
root.left.left. left = new TreeNode( data: 30);
root.left.left. right = new TreeNode( data: 50);

root.left.right = new TreeNode( data: 50);

root.left.right = new TreeNode( data: 50);
root.left.right.left= new TreeNode( data: 80);
root.left.right.right = new TreeNode( data: 100);
roott.right = new TreeNode( data: 20);
root.right.left= new TreeNode ( data: 100);
root.right.right = new TreeNode( data: 200);
root.right.left.left= new TreeNode( data: 10);
root.right.left. right = new TreeNode( data: 15)

root.right.right.left= new TreeNode (data: 55);
System.out.println (isCompleteBinary Tree (root));
}
}
